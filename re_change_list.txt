class Solution
{
    static ArrayList<ArrayList<Integer>> ans = new  ArrayList<>();
    
    static void fun(int[] arr, ArrayList<Integer> x, int k)
    {
        if(k<0) return;
        if(k==0)
        {
            ans.add(new ArrayList<>(x));
            return;
        }
        
        for(int i=0; i<arr.length; i++)
        {
            x.add(arr[i]);
            int xl = x.size();
            if(xl>1 && x.get(xl-1)<x.get(xl-2)) 
            {
                x.remove(xl-1);
                continue;
            }
            k-=arr[i];
            fun(arr, x, k);
            k+=arr[i];
            x.remove(x.size()-1);
        }
    }
    
    
    static ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> list, int k)
    {
        ArrayList<Integer> x = new ArrayList<>();
        Set<Integer> lst = new HashSet<>(list);
        
        int n = lst.size();
        int[] arr = new int[n];
        int i=0;
        for (Integer j: lst) 
        {
            arr[i] = j;
            i++;
        }
        
        fun(arr, x, k);
        return ans;
    }
}